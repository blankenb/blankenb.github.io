{"version":3,"sources":["auth.js","SplashPage.jsx","Sidebar.jsx","Results.jsx","HomePage.jsx","IndexPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["CLIENT_AUTH_FIELD","btoa","CLIENT_ID","SplashPage","props","handlePlaylist1Change","event","setState","playlist1Url","target","value","playlist1Error","handlePlaylist2Change","playlist2Url","playlist2Error","enableSubmit","state","handleSubmit","preventDefault","console","log","playlist1","playlist2","fetchPlaylist","playlistUrl","playlistKey","re","match","updateObject","this","groups","playlist_id","apiUrl","refreshTokenIfNecessary","fetch","method","headers","accessToken","then","res","ok","status","Error","json","setPlaylists","catch","err","message","className","onSubmit","type","onChange","placeholder","disabled","React","Component","Sidebar","resetPlaylist","onClick","name","owner","display_name","Results","selectShared","menuSelected","selectPlaylist1Recommended","selectPlaylist2Recommended","getBrightness","r","g","b","getRandomColorStyling","Math","floor","random","brightness","backgroundColor","color","getSource","simularityScore","genres","sources","artists","songs","id","length","map","genre","index","style","artist","backgroundImage","imageUrl","href","url","song","artistNames","join","HomePage","fetchPlaylistTracks","nextKey","formatData","next","items","concat","getSmallImageUrl","images","smallest","height","image","getMediumImageUrl","track","hasOwnProperty","external_urls","spotify","album","Set","Object","keys","count","formatExtraData","slice","remainingArtists","setSources","artistIds","getGenreIntersection","playlist1Data","genreSet","playlist2Data","Array","from","filter","x","has","sort","a","aCount","isNaN","bCount","playlist1DataCount","playlist2DataCount","getArtistIntersection","artistSet","getSongIntersection","songSet","getGenreDifference","playlistKey1","playlistKey2","toReturn","getArtistDifference","getSongDifference","getSimilarityScore","genreProportion","shared","min","size","toFixed","p1","p2","componentDidMount","next1","next2","IndexPage","getAuthToken","body","validUntil","Date","setSeconds","getSeconds","expires_in","spotifyAuth","access_token","getTime","localStorage","setItem","getItem","Number","now","fetchedPlaylists","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b5b733d.chunk.js","sourcesContent":["const CLIENT_ID = '770776614bfc481db181a1506efb6b9a';\nconst CLIENT_SECRET = '065fd50712ca46d89b1744ecb28f613e'; // lol\nexport const CLIENT_AUTH_FIELD = btoa(CLIENT_ID + ':' + CLIENT_SECRET);\n","import React from 'react';\nimport './SplashPage.css'\n\nclass SplashPage extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        playlist1Url: '',\n        playlist2Url: '',\n        playlist1Error: null,\n        playlist2Error: null,\n        playlist1: null,\n        playlist2: null\n      };\n    }\n\n    handlePlaylist1Change = event => {\n      this.setState({\n        playlist1Url: event.target.value,\n        playlist1Error: null\n      });\n    }\n\n    handlePlaylist2Change = event => {\n      this.setState({\n        playlist2Url: event.target.value,\n        playlist2Error: null\n      });\n    }\n\n    enableSubmit = () => {\n      return this.state.playlist1Url !== '' && this.state.playlist2Url !== '' &&\n             this.state.playlist1Error === null && this.state.playlist2Error == null;\n    }\n\n    fetchPlaylist(playlistUrl, playlistKey) {\n      let re = /playlist\\/(?<playlist_id>\\w+)/;\n      let match = playlistUrl.match(re);\n\n      if (match === null) {\n        console.log(\"error parsing playlist\");\n        let updateObject = {};\n        updateObject[playlistKey + 'Error'] = 'Not a valid playlist URL';\n        this.setState(updateObject);\n        return;\n      }\n      console.log(\"id: \" + match.groups.playlist_id);\n\n      const apiUrl = `https://api.spotify.com/v1/playlists/${match.groups.playlist_id}?fields=id%2Cname%2Cowner%2Cimages`\n\n      this.props.refreshTokenIfNecessary();\n      fetch(apiUrl, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + this.props.accessToken\n        }\n      })\n      .then((res) => { \n        if (!res.ok) {\n          if (res.status === 404) {\n            throw new Error('404');\n          } else if (res.status === 401) {\n            throw new Error('401');\n          } else {\n            throw new Error('400');\n          }\n        }\n\n        return res.json(); \n      })\n      .then(\n        (res) => {\n          console.log(res);\n\n          let updateObject = {};\n          updateObject[playlistKey] = res;\n          this.setState(updateObject);\n\n          if (this.state.playlist1 !== null && this.state.playlist2 !== null) {\n            this.props.setPlaylists(this.state.playlist1, this.state.playlist2);\n          }\n        }\n      )\n      .catch(\n        (err) => {\n          console.log(err);\n\n          let updateObject = {};\n          if (err.message === '404') {\n            updateObject[playlistKey + 'Error'] = 'Playlist not found';\n          } else if (err.message === '401') {\n            updateObject[playlistKey + 'Error'] = 'Error connecting to Spotify. Please reload the page and try again.'; \n          } else {\n            updateObject[playlistKey + 'Error'] = 'Unknown error occurred'; \n          }\n          this.setState(updateObject);\n        }\n      );\n    }\n\n    handleSubmit = (event) => {\n      event.preventDefault();\n      console.log(\"handling submit\");\n\n      this.setState({\n        playlist1: null,\n        playlist2: null\n      });\n\n      this.fetchPlaylist(this.state.playlist1Url, 'playlist1');\n      this.fetchPlaylist(this.state.playlist2Url, 'playlist2');\n      // this.props.setPlaylists(this.state.playlist1Url, this.state.playlist2Url);\n    }\n\n    render() {\n      // TODO: Handle playlists being the same ?\n      return (\n        <div className=\"splash-page\">\n          <h1>Welcome to Library Linker</h1>\n          <div className=\"playlist-enter\">\n            <p>Enter the URLs of two Spotify playlists to check their similarity and discover recommendations</p> \n            <form onSubmit={this.handleSubmit}>\n                <div className=\"textbox-wrapper\">\n                  <input type=\"text\" \n                    className=\"textbox\"\n                    value={this.state.playlist1Url} \n                    onChange={this.handlePlaylist1Change} \n                    placeholder=\"Playlist URL\"\n                  />\n                  {this.state.playlist1Error !== null &&\n                    <span className=\"error\">{this.state.playlist1Error}</span>\n                  }\n                </div>\n                <div className=\"textbox-wrapper\">\n                  <input type=\"text\" \n                    className=\"textbox\"\n                    value={this.state.playlist2Url} \n                    onChange={this.handlePlaylist2Change} \n                    placeholder=\"Playlist URL\"\n                  />\n                  {this.state.playlist2Error !== null &&\n                    <span className=\"error\">{this.state.playlist2Error}</span>\n                  }\n                </div>\n                {this.enableSubmit()\n                  ? <button type=\"submit\" className=\"pill\">Find Shared Tastes</button>\n                  : <button disabled type=\"submit\" className=\"pill\">Find Shared Tastes</button>\n                }\n            </form>\n          </div>\n        </div>\n      )\n    }\n}\n\nexport default SplashPage;","import React from \"react\";\n\nclass Sidebar extends React.Component{\n    constructor(props){\n        super(props);\n    }\n\n    resetPlaylist = () => {\n        this.props.setPlaylists(null, null);\n    }\n\n    render() {\n        return (\n            <div className=\"sidebar\">\n                <div className=\"top\">\n                    <h1>Library Linker</h1>\n                    <div className=\"playlists\">\n                        <div className=\"playlists-header\">\n                            <h2>Playlists</h2>\n                            <button className=\"text\" onClick={this.resetPlaylist}>Change</button>\n                        </div>\n                        <div className=\"playlist\">\n                            <div className=\"playlist-name\">{this.props.playlist1.name}</div>\n                            <div className=\"playlist-owner\">Created by <b>{this.props.playlist1.owner.display_name}</b></div>\n                        </div>\n                        <div className=\"playlist\">\n                            <div className=\"playlist-name\">{this.props.playlist2.name}</div>\n                            <div className=\"playlist-owner\">Created by <b>{this.props.playlist2.owner.display_name}</b></div>\n                        </div>\n                    </div>\n                </div>\n                {/* <div className=\"bottom\">\n                    <button className=\"pill\">Play a Game</button>\n                </div> */}\n            </div>\n        )\n    }\n}\nexport default Sidebar;","import React from 'react';\nimport './HomePage.css';\n\nclass Results extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      menuSelected: 'shared'\n    }\n  }\n\n  selectShared = () => {\n    if (this.state.menuSelected !== 'shared') {\n      this.setState({ menuSelected: 'shared' });\n    }\n  }\n\n  selectPlaylist1Recommended = () => {\n    if (this.state.menuSelected !== 'p1') {\n      this.setState({ menuSelected: 'p1' });\n    }\n  }\n\n  selectPlaylist2Recommended = () => {\n    if (this.state.menuSelected !== 'p2') {\n      this.setState({ menuSelected: 'p2' });\n    }\n  }\n\n  getBrightness = (r, g, b) => {\n     // From https://www.w3.org/WAI/ER/WD-AERT/#color-contrast\n    return ((r * 299) + (g * 587) + (b * 114)) / 1000;\n  }\n\n  getRandomColorStyling = () => {\n    var r = Math.floor(Math.random() * 256);\n    var g = Math.floor(Math.random() * 256);\n    var b = Math.floor(Math.random() * 256);\n\n    let brightness = this.getBrightness(r, g, b);\n    return { \n      backgroundColor: `rgb(${r}, ${g}, ${b})`,\n      color: brightness >= 128 ? 'rgba(0, 0, 0, 0.8)' : 'rgba(255, 255, 255, 0.8)'\n    }\n  }\n\n  getSource = () => {\n    // In p2 but not p1\n    if (this.state.menuSelected !== 'p1') {\n    }\n    // In p1 but not p2\n    else if (this.state.menuSelected !== 'p2') {\n    }\n    // Shared\n    else {\n      \n    }\n  }\n\n  render() {\n    const simularityScore = this.props.simularityScore;\n    const genres = this.props.sources[this.state.menuSelected].genres;\n    const artists = this.props.sources[this.state.menuSelected].artists;\n    const songs = this.props.sources[this.state.menuSelected].songs\n\n    // console.log(artists);\n\n    return (\n      <div className=\"stats-wrapper\">\n        <section id=\"similarity\">\n          <h1 className=\"statistic-name\">\n            Similarity:&nbsp;\n            <span className=\"statistic-value\">{simularityScore}%</span>\n          </h1>\n        </section>\n\n        <section id=\"menu\">\n          <button className={`menu ${this.state.menuSelected === 'shared' ? \"selected\" : \"\"}`}\n                  onClick={this.selectShared}>\n            Shared\n          </button>\n          <button className={`menu ${this.state.menuSelected === 'p1' ? \"selected\" : \"\"}`}\n                  onClick={this.selectPlaylist1Recommended}>\n            Recommended for {this.props.playlist1.name}\n          </button>\n          <button className={`menu ${this.state.menuSelected === 'p2' ? \"selected\" : \"\"}`}\n                  onClick={this.selectPlaylist2Recommended}>\n            Recommended for {this.props.playlist2.name}\n          </button>\n        </section>\n\n        <section id=\"genres\">\n          <h2 className=\"section-name\">Genres</h2>\n          { genres.length === 0\n            ? <div className=\"no-values\">\n                { this.state.menuSelected === 'shared' \n                  ? 'No shared genres :('\n                  : 'Playlist already shares all genres :)'\n                }\n              </div>\n            : <ul className=\"statistic-value\">\n                { genres.map((genre, index) => {\n                  return <li key={index} style={this.getRandomColorStyling()}>{genre.name}</li>\n                })}\n              </ul>\n          }\n        </section>\n\n        <section id=\"artists\">\n          <h2 className=\"section-name\">Artists</h2>\n\n          { artists.length === 0\n            ? <div className=\"no-values\">\n                { this.state.menuSelected === 'shared' \n                  ? 'No shared artists :('\n                  : 'Playlist already shares all artists :)'\n                }\n              </div>\n            : <ul className=\"statistic-value\">\n                { artists.map((artist, index) => {\n                  return (\n                    <li key={index} style={{backgroundImage: `linear-gradient(0deg, rgba(0,0,0,0.2), rgba(0,0,0,0.2)), url(${artist.imageUrl})`}}>\n                      <a href={artist.url} target=\"_blank\" className=\"artist-link\">\n                        <div className=\"artist-name-wrapper\">\n                          <div className=\"artist-name\">\n                            {artist.name}\n                          </div>\n                        </div>\n                      </a>\n                    </li>\n                  )\n                })}\n              </ul>\n          }\n        </section>\n\n        <section id=\"songs\">\n          <h2 className=\"section-name\">Songs</h2>\n          { songs.length === 0\n            ? <div className=\"no-values\">\n                { this.state.menuSelected === 'shared' \n                  ? 'No shared songs :('\n                  : 'Playlist already shares all songs :)'\n                }\n              </div>\n            : <ul className=\"statistic-value\">\n                { songs.map((song, index) => {\n                  let artistNames = song.artistNames.join(', ');\n\n                  return (\n                    <li key={index}>\n                      <a href={song.url} target=\"_blank\">\n                        <div className=\"song-wrapper\">\n                          <div className=\"song-image\" style={{backgroundImage: `url(${song.imageUrl})`}}></div>\n                          <div className=\"song-name\">\n                            {song.name}\n                          </div>\n                          <div className=\"artist-names\">\n                            {artistNames}\n                          </div>\n                        </div>\n                      </a>\n                    </li>\n                  )\n                })}\n              </ul>\n          }\n        </section>\n      </div>\n    );\n  }\n}\nexport default Results;\n\n","import React from 'react';\nimport './HomePage.css';\n\nimport Sidebar from './Sidebar';\nimport Results from './Results';\n\nclass HomePage extends React.Component {\n    constructor(props) {\n      super(props);\n\n      const { playlist1, playlist2 } = this.props;\n      \n      // -H \"Accept: application/json\" -H \"Content-Type: application/json\" -H \"Authorization: Bearer BQAGal7mnvIYFX8h_IpWCUp9F2U3Id3vGWYnQN_eEINooQZknDCdX8sCpCYmJrnOkFw8C0EeIG4MFnGCGZ8\"\n\n      this.state = {\n        next1: `https://api.spotify.com/v1/playlists/${playlist1.id}/tracks?fields=next%2Citems(track(name%2Cid%2Cartists%2Cexternal_urls%2Cpreview_url%2Calbum(images)))&limit=100`,\n        playlist1Data: {\n          // raw\n          items: [],\n\n          // maps\n          songs: {},    // { id: { name, artistNames, url, imageUrl } }\n          artists: {},  // { id: { name, url, imageUrl, count } }\n          genres: {},   // { name: count }\n\n          // sets of ids of maps\n          songSet: null,\n          artistSet: null,\n          genreSet: null\n        },\n        next2: `https://api.spotify.com/v1/playlists/${playlist2.id}/tracks?fields=next%2Citems(track(name%2Cid%2Cartists%2Cexternal_urls%2Cpreview_url%2Calbum(images)))&limit=100`,\n        playlist2Data: {\n          items: [],\n          songs: {},\n          artists: {},\n          genres: {},\n          songSet: null,\n          artistSet: null,\n          genreSet: null\n        },\n        sources: {\n          shared: {\n            genres: [],\n            artists: [],\n            songs: []\n          },\n          p1: {\n            genres: [],\n            artists: [],\n            songs: []\n          },\n          p2: {\n            genres: [],\n            artists: [],\n            songs: []\n          }\n        }\n      };\n    }\n\n    fetchPlaylistTracks = (nextKey, playlistKey, updateObject) => {\n      if (updateObject === null) {\n        console.log(\"Building new updateobject for \" + nextKey + \" \" + playlistKey);\n        updateObject = {};\n        updateObject[nextKey] = this.state[nextKey];\n        updateObject[playlistKey] = this.state[playlistKey];\n      }\n\n      if (updateObject[nextKey] === null) {\n        console.log(\"FETCHING no more playlists for \" + nextKey + \" \" + playlistKey);\n        this.setState(updateObject);\n\n        this.formatData(playlistKey);\n        return;\n      }\n\n      console.log(\"FETCHING playlists for \" + nextKey + \" \" + playlistKey);\n      console.log(updateObject);\n\n      this.props.refreshTokenIfNecessary();\n      fetch(updateObject[nextKey], {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + this.props.accessToken\n        }\n      })\n      .then((res) => res.json())\n      .then(\n        (res) => {\n          // console.log(\"Fetched for \" + playlistKey);\n          // console.log(res);\n\n          updateObject[nextKey] = res.next;\n          updateObject[playlistKey].items = updateObject[playlistKey].items.concat(res.items);\n          this.fetchPlaylistTracks(nextKey, playlistKey, updateObject);\n        }\n      )\n      .catch(\n        (err) => {\n          console.log(err);\n          // TODO: Handle\n        }\n      );\n    }\n    \n    getSmallImageUrl = (images) => {\n      if (!images || images.length === 0) {\n        return '';\n      }\n\n      let smallest = { height: 999999 };\n      for (const image of images) {\n        if (image.height < smallest.height) {\n          smallest = image;\n        }\n      }\n      return smallest.url;\n    }\n\n    getMediumImageUrl = (images) => {\n      if (!images || images.length === 0) {\n        return '';\n      }\n\n      for (const image of images) {\n        if (image.height >= 200 && image.height <= 400) {\n          return image.url;\n        }\n      }\n      return images[images.length - 1].url;\n    }\n\n    formatData = (playlistKey) => {\n      let updateObject = {};\n      updateObject[playlistKey] = this.state[playlistKey];\n\n      console.log(\"Setting songs for \" + playlistKey);\n      let songs = {};\n      for (const track of this.state[playlistKey].items) {\n        if (!songs.hasOwnProperty(track.track.id)) {\n          songs[track.track.id] = {\n            name: track.track.name,\n            artistNames: track.track.artists.map(artist => artist.name),\n            url: track.track.external_urls.spotify,\n            imageUrl: this.getSmallImageUrl(track.track.album.images)\n          }\n        }\n      }\n      updateObject[playlistKey]['songs'] = songs;\n      updateObject[playlistKey]['songSet'] = new Set(Object.keys(songs));\n\n      console.log(\"Setting artists for \" + playlistKey);\n      let artists = {};\n      for (const track of this.state[playlistKey].items) {\n        for (const artist of track.track.artists) {\n          if (artists.hasOwnProperty(artist.id)) {\n            artists[artist.id].count += 1;\n          } else {\n            artists[artist.id] = {\n              name: artist.name,\n              url: artist.external_urls.spotify,\n              imageUrl: '',\n              count: 1\n            };\n          }\n        }\n      }\n      updateObject[playlistKey]['artists'] = artists;\n      updateObject[playlistKey]['artistSet'] = new Set(Object.keys(artists));\n\n      this.formatExtraData(playlistKey, updateObject, Object.keys(artists).slice(0));\n    }\n\n    // Handles genres and artist images\n    formatExtraData = (playlistKey, updateObject, remainingArtists) => {\n      if (remainingArtists.length === 0) {\n        console.log(\"Finished collecting extra data for \" + playlistKey);\n        this.setState(updateObject);\n        console.log(this.state);\n        this.setSources();\n        return;\n      }\n\n      console.log(\"Setting genres for \" + playlistKey);\n      let genres = {};\n      \n      // Spotify's API can only handle 50 at a time\n      let artistIds = remainingArtists.slice(0, 50).join(\"%2C\");\n      remainingArtists = remainingArtists.slice(50);\n\n      this.props.refreshTokenIfNecessary();\n      fetch(`https://api.spotify.com/v1/artists?ids=${artistIds}`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + this.props.accessToken\n        }\n      })\n      .then((res) => res.json())\n      .then(\n        (res) => {\n          console.log(res);\n\n          for (const artist of res.artists) {\n            if (!artist) {\n              continue;\n            }\n\n            for (const genre of artist.genres) {\n              if (genres.hasOwnProperty(genre)) {\n                genres[genre] += 1;\n              } else {\n                genres[genre] = 1;\n              }\n            }\n\n            updateObject[playlistKey]['artists'][artist.id].imageUrl = this.getMediumImageUrl(artist.images);\n          }\n\n          updateObject[playlistKey]['genres'] = genres;\n          updateObject[playlistKey]['genreSet'] = new Set(Object.keys(genres));\n\n          this.formatExtraData(playlistKey, updateObject, remainingArtists);\n        }\n      )\n      .catch(\n        (err) => {\n          console.log(err);\n          // TODO: Handle\n        }\n      );\n    }\n\n    getGenreIntersection = () => {\n      if (this.state.playlist1Data.genreSet === null || this.state.playlist2Data.genreSet === null) {\n        return [];\n      } else {\n        return Array.from(new Set(\n          [...this.state.playlist1Data.genreSet]\n          .filter(x => this.state.playlist2Data.genreSet.has(x))\n        ))\n        .sort((a, b) => {\n          let aCount = this.state.playlist1Data.genres[a] + this.state.playlist2Data.genres[a];\n          if (isNaN(aCount)) {\n            aCount = 0;\n          }\n          let bCount = this.state.playlist1Data.genres[b] + this.state.playlist2Data.genres[b];\n          if (isNaN(bCount)) {\n            bCount = 0;\n          }\n          return bCount - aCount;\n        })\n        .map(name => {\n          return {\n            name: name,\n            playlist1DataCount: this.state.playlist1Data.genres[name],\n            playlist2DataCount: this.state.playlist2Data.genres[name]\n          }\n        });\n      }\n    }\n\n    getArtistIntersection = () => {\n      if (this.state.playlist1Data.artistSet === null || this.state.playlist2Data.artistSet === null) {\n        return [];\n      } else {\n        return Array.from(new Set(\n          [...this.state.playlist1Data.artistSet]\n          .filter(x => this.state.playlist2Data.artistSet.has(x))\n        ))\n        .sort((a, b) => {\n          let aCount = this.state.playlist1Data.artists[a].count + this.state.playlist2Data.artists[a].count;\n          if (isNaN(aCount)) {\n            aCount = 0;\n          }\n          let bCount = this.state.playlist1Data.artists[b].count + this.state.playlist2Data.artists[b].count;\n          if (isNaN(bCount)) {\n            bCount = 0;\n          }\n          return bCount - aCount;\n        })\n        .map(id => {\n          return {\n            name: this.state.playlist1Data.artists[id].name,\n            url: this.state.playlist1Data.artists[id].url,\n            imageUrl: this.state.playlist1Data.artists[id].imageUrl,\n            playlist1DataCount: this.state.playlist1Data.artists[id].count,\n            playlist2DataCount: this.state.playlist2Data.artists[id].count\n          }\n        });\n      }\n    }\n\n    getSongIntersection = () => {\n      if (this.state.playlist1Data.songSet === null || this.state.playlist2Data.songSet === null) {\n        return [];\n      } else {\n        return Array.from(new Set(\n          [...this.state.playlist1Data.songSet]\n          .filter(x => this.state.playlist2Data.songSet.has(x))\n        ))\n        .map(id => this.state.playlist1Data.songs[id]);\n      }\n    }\n\n    // Gets the set difference for the data of playlistKey1 - playlistKey2\n    getGenreDifference = (playlistKey1, playlistKey2) => {\n      if (this.state[playlistKey1].genreSet === null || this.state[playlistKey2].genreSet === null) {\n        return [];\n      } else {\n        return Array.from(new Set(\n          [...this.state[playlistKey1].genreSet]\n          .filter(x => !this.state[playlistKey2].genreSet.has(x))\n        ))\n        .sort((a, b) => {\n          let aCount = this.state[playlistKey1].genres[a];\n          if (isNaN(aCount)) {\n            aCount = 0;\n          }\n          let bCount = this.state[playlistKey1].genres[b];\n          if (isNaN(bCount)) {\n            bCount = 0;\n          }\n          return bCount - aCount;\n        })\n        .map(name => {\n          let toReturn = { name: name };\n          toReturn[playlistKey1 + 'Count'] = this.state[playlistKey1].genres[name];\n          return toReturn;\n        });\n      }\n    }\n\n    // Gets the set difference for the data of playlistKey1 - playlistKey2\n    getArtistDifference = (playlistKey1, playlistKey2) => {\n      if (this.state[playlistKey1].artistSet === null || this.state[playlistKey2].artistSet === null) {\n        return [];\n      } else {\n        return Array.from(new Set(\n          [...this.state[playlistKey1].artistSet]\n          .filter(x => !this.state[playlistKey2].artistSet.has(x))\n        ))\n        .sort((a, b) => {\n          let aCount = this.state[playlistKey1].artists[a].count;\n          if (isNaN(aCount)) {\n            aCount = 0;\n          }\n          let bCount = this.state[playlistKey1].artists[b].count;\n          if (isNaN(bCount)) {\n            bCount = 0;\n          }\n          return bCount - aCount;\n        })\n        .map(id => {\n          let toReturn = {\n            name: this.state[playlistKey1].artists[id].name,\n            url: this.state[playlistKey1].artists[id].url,\n            imageUrl: this.state[playlistKey1].artists[id].imageUrl\n          }\n          toReturn[playlistKey1 + 'Count'] = this.state[playlistKey1].artists[id].count;\n          return toReturn;\n        });\n      }\n    }\n\n    // Gets the set difference for the data of playlistKey1 - playlistKey2\n    getSongDifference = (playlistKey1, playlistKey2) => {\n      if (this.state[playlistKey1].songSet === null || this.state[playlistKey2].songSet === null) {\n        return [];\n      } else {\n        return Array.from(new Set(\n          [...this.state[playlistKey1].songSet]\n          .filter(x => !this.state[playlistKey2].songSet.has(x))\n        ))\n        .map(id => this.state[playlistKey1].songs[id]);\n      }\n    }\n\n    getSimilarityScore = () => {\n      if (this.state.playlist1Data.genreSet === null || this.state.playlist1Data.artistSet === null ||\n          this.state.playlist2Data.genreSet === null || this.state.playlist2Data.artistSet === null) {\n        return 0;\n      }\n\n      // 80% proportion of shared artists\n      // 20% proportion of shared genres\n      let genreProportion = this.state.sources.shared.genres.length / \n        Math.min(this.state.playlist1Data.genreSet.size, \n                 this.state.playlist2Data.genreSet.size);\n      let artistProportion = this.state.sources.shared.artists.length / \n        Math.min(this.state.playlist1Data.artistSet.size, \n                this.state.playlist2Data.artistSet.size);\n      return (80*artistProportion + 20*genreProportion).toFixed(2);\n    }\n\n    setSources = () => {\n      this.setState({\n        sources: {\n          shared: {\n            genres: this.getGenreIntersection(),\n            artists: this.getArtistIntersection(),\n            songs: this.getSongIntersection()\n          },\n          p1: {\n            genres: this.getGenreDifference('playlist2Data', 'playlist1Data'),\n            artists: this.getArtistDifference('playlist2Data', 'playlist1Data'),\n            songs: this.getSongDifference('playlist2Data', 'playlist1Data')\n          },\n          p2: {\n            genres: this.getGenreDifference('playlist1Data', 'playlist2Data'),\n            artists: this.getArtistDifference('playlist1Data', 'playlist2Data'),\n            songs: this.getSongDifference('playlist1Data', 'playlist2Data')\n          }\n        }\n      });\n    }\n\n    componentDidMount = () => {\n      console.log(\"fetching playlists\");\n      this.fetchPlaylistTracks('next1', 'playlist1Data', null);\n      this.fetchPlaylistTracks('next2', 'playlist2Data', null);\n    }\n\n    render() {\n      return (\n        <div className=\"home-page\">\n          <Sidebar playlist1={this.props.playlist1}\n                   playlist2={this.props.playlist2}\n                   setPlaylists={this.props.setPlaylists}/>\n          <Results playlist1={this.props.playlist1}\n                   playlist2={this.props.playlist2}\n                   playlist1Data={this.state.playlist1Data}\n                   playlist2Data={this.state.playlist2Data}\n                   simularityScore={this.getSimilarityScore()}\n                   sources={this.state.sources} />\n        </div>\n      );\n    }\n}\n\nexport default HomePage;","import React from 'react';\n\nimport { CLIENT_AUTH_FIELD } from './auth';\nimport SplashPage from './SplashPage'\nimport HomePage from './HomePage';\n\nclass IndexPage extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        accessToken: null,\n        validUntil: null,\n        fetchedPlaylists: false,\n        playlist1: null,\n        playlist2: null\n      };\n    }\n\n    getAuthToken = () => {\n      fetch('https://accounts.spotify.com/api/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Authorization': 'Basic ' + CLIENT_AUTH_FIELD\n        },\n        body: 'grant_type=client_credentials'\n      })\n      .then((res) => res.json())\n      .then(\n        (res) => {\n          const validUntil = new Date();\n          validUntil.setSeconds(validUntil.getSeconds() + res.expires_in - 60)\n          const spotifyAuth = {\n            accessToken: res.access_token,\n            validUntil: validUntil.getTime()\n          } // Needs to match fields in state\n    \n          localStorage.setItem('spotifyAccessToken', spotifyAuth.accessToken);\n          localStorage.setItem('spotifyValidUntil', spotifyAuth.validUntil);\n          this.setState(spotifyAuth);\n        },\n        (err) => console.log(err)\n      )\n    }\n\n    refreshTokenIfNecessary = () => {\n      if (localStorage.getItem('spotifyAccessToken') === null ||\n          Number(localStorage.getItem('spotifyValidUntil')) <= Date.now()) {\n        console.log(\"authorizing\");\n        this.getAuthToken();\n        return true;\n      }\n    }\n\n    setPlaylists = (playlist1, playlist2) => {\n      console.log(\"setting playlists\");\n      this.setState({\n        playlist1: playlist1,\n        playlist2: playlist2\n      });\n    }\n\n    componentDidMount() {\n      if (!this.refreshTokenIfNecessary()) {\n        this.setState({\n          accessToken: localStorage.getItem('spotifyAccessToken'),\n          validUntil: Number(localStorage.getItem('spotifyValidUntil'))\n        });\n      }\n    }\n\n    render() {\n      console.log(this.state.accessToken);\n      if (this.state.playlist1 !== null && this.state.playlist2 !== null) {\n        return (\n          <HomePage accessToken={this.state.accessToken} \n                    playlist1={this.state.playlist1} \n                    playlist2={this.state.playlist2} \n                    setPlaylists={this.setPlaylists}\n                    refreshTokenIfNecessary={this.refreshTokenIfNecessary} />\n        )\n      } else {\n        return (\n          <SplashPage accessToken={this.state.accessToken}\n                      setPlaylists={this.setPlaylists}\n                      refreshTokenIfNecessary={this.refreshTokenIfNecessary} />\n        );\n      }\n    }\n}\n\nexport default IndexPage;","// import { Router, Route, Redirect } from \"react-router\";\n\nimport './App.css';\nimport IndexPage from './IndexPage';\n\nfunction App() {\n  return <IndexPage />\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}